# Wanderlust - An Airbnb Clone

Wanderlust is a full-stack web application designed to mimic the core functionalities of Airbnb, allowing users to discover and list unique accommodations around the world. From cozy cottages to luxurious villas, Wanderlust provides a platform for travelers to find their perfect escape and for hosts to share their spaces.

## Features

* **User Authentication:** Secure user registration and login with Passport.js (Local Strategy).
* **Listing Management:**
    * Create, Read, Update, and Delete (CRUD) operations for listings.
    * Upload multiple images for listings with Cloudinary integration for cloud storage.
    * Geospatial data for each listing using Maptiler SDK and Node-Geocoder to enable location-based searches and map integration.
* **Review System:** Users can leave reviews and ratings for listings.
* **Map Integration:** Visualize listings on an interactive map.
* **Search & Filter:** Search listings by location, country, or other criteria. (Implied, but good to highlight if implemented).
* **Responsive Design:** User-friendly interface accessible across various devices.
* **Flash Messages:** Provide real-time feedback to users on actions.

## Technologies Used

### Frontend
* **EJS (Embedded JavaScript):** For dynamic HTML templating.
* **EJS-Mate:** Layout and partials for EJS.
* **Bootstrap 5:** For responsive and modern UI components.
* **CSS:** Custom styling.
* **JavaScript:** Client-side interactions.

### Backend
* **Node.js (v22.11.0):** JavaScript runtime environment.
* **Express.js (v5.x):** Fast, unopinionated, minimalist web framework.
* **MongoDB Atlas:** Cloud-hosted NoSQL database for data storage.
* **Mongoose (v8.15.1):** ODM (Object Data Modeling) for MongoDB and Node.js.
* **Passport.js:** Authentication middleware for Node.js.
    * `passport-local` & `passport-local-mongoose` for username/password authentication.
* **Cloudinary:** Cloud-based image and video management (for storing listing images).
    * `multer` & `multer-storage-cloudinary` for handling file uploads.
* **MapTiler SDK (`@maptiler/sdk`):** For integrating maps and handling client-side map interactions.
* **Node-Geocoder:** For converting addresses/locations into geographical coordinates (latitude and longitude).
* **Dotenv (`dotenv`):** For loading environment variables from a `.env` file.
* **Connect-Mongo:** MongoDB session store for Express.
* **Express-Session:** Session management middleware.
* **Connect-Flash:** Middleware for flash messages.
* **Method-Override:** Allows you to use HTTP verbs such as PUT or DELETE in places where the client doesn't support it.
* **Joi:** For schema validation (ensuring data integrity).

## Getting Started

Follow these steps to set up and run the Wanderlust project locally.

### Prerequisites

* Node.js (v22.11.0 or higher)
* npm (Node Package Manager)
* A MongoDB Atlas account
* A Cloudinary account
* A MapTiler account (for API key)

### Installation

1.  **Clone the repository:**
    ```bash
    git clone <your-repo-url>
    cd wanderlust
    ```

2.  **Install dependencies:**
    ```bash
    npm install
    ```

### Environment Variables (.env setup)

Create a `.env` file in the root directory of your project and add the following environment variables. Replace the placeholder values with your actual credentials:

```env
ATLAS_URL=mongodb+srv://<YOUR_MONGO_ATLAS_USERNAME>:<YOUR_MONGO_ATLAS_PASSWORD>@cluster0.abcde.mongodb.net/wanderlust?retryWrites=true&w=majority
CLOUD_NAME=<YOUR_CLOUDINARY_CLOUD_NAME>
CLOUDINARY_API_KEY=<YOUR_CLOUDINARY_API_KEY>
CLOUDINARY_API_SECRET=<YOUR_CLOUDINARY_API_SECRET>
MAP_TILER_API_KEY=<YOUR_MAPTILER_API_KEY>
SECRET=<A_VERY_LONG_RANDOM_STRING_FOR_SESSION_SECRET>